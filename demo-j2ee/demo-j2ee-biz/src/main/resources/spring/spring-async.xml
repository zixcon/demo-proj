<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">


    <!--
        1. xmlns:task="http://www.springframework.org/schema/task"
        2. http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task.xsd
        3. <context:component-scan basepackage必须包含async所在的类
        4. <task:annotation-driven 配置启动
        -->

    <!-- 缺省的异步任务线程池 -->
    <task:annotation-driven executor="asyncExecutor" />
    <task:executor id="asyncExecutor" pool-size="5-20" queue-capacity="10" />

    <!--
        id：当配置多个executor时，被@Async("id")指定使用；也被作为线程名的前缀。
        pool-size：
            core size：最小的线程数，缺省：1
            max size：最大的线程数，缺省：Integer.MAX_VALUE
        queue-capacity：当最小的线程数已经被占用满后，新的任务会被放进queue里面，当这个queue的capacity也被占满之后，pool里面会创建新线程处理这个任务，直到总线程数达到了max size，这时系统会拒绝这个任务并抛出TaskRejectedException异常（缺省配置的情况下，可以通过rejection-policy来决定如何处理这种情况）。缺省值为：Integer.MAX_VALUE
        keep-alive：超过core size的那些线程，任务完成后，再经过这个时长（秒）会被结束掉
        rejection-policy：当pool已经达到max size的时候，如何处理新任务
            ABORT（缺省）：抛出TaskRejectedException异常，然后不执行
            DISCARD：不执行，也不抛出异常
            DISCARD_OLDEST：丢弃queue中最旧的那个任务
            CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行
     -->
    <!-- 处理log的线程池 -->
    <task:executor id="logExecutor" pool-size="10-100" queue-capacity="5" keep-alive="5" rejection-policy="CALLER_RUNS"/>
</beans>